/**
 * Tailwind Type style generator
 * This code defines a JavaScript function called generateTypeStyle 
 * that generates a Tailwind Utility Class (style object) for a given font size, line height, letter spacing, and font suffix.
 * More info: https://tailwindcss.com/docs/plugins#adding-utilities
 *
 * @param {number} fontSize - fontSize in px
 * @param {number} lineHeight - lineHeight % value, will be converted to a line height number
 * @param {number} letterSpacing - letterSpacing %
 * @param {string} suffix - suffix for the tw class name, fontweight will be generated by this
 * @param {object} baseFont - base fontfamily and other consistent style properties
 *
 * @returns {object} - Tailwind Utility Type style
 */
function generateTypeStyle(fontSize, lineHeight, letterSpacing, suffix = '', baseFont = {}) {
	const letterSpacingValue =
		letterSpacing !== 0
			? { letterSpacing: `${(((letterSpacing / 100) * fontSize) / 16).toFixed(1)}rem` }
			: null;
	return [
		{
			[`${suffix}`]: {
				...baseFont,
				fontWeight: `${suffix[suffix.length - 2]}00`,
				fontSize: `${fontSize / 16}rem`,
				lineHeight: `${(lineHeight / 100).toFixed(3)}`,
				...letterSpacingValue,
			},
		},
	];
}

module.exports = function typeGenerator() {
	return ({ theme, addUtilities }) => {
		// Sans Serif
		const prefixSans = '.type-sans-';
		const baseSans = {
			fontFamily: `${theme('fontFamily.sans')}`,
		};
		// Serif
		const prefixSerif = '.type-serif-';
		const baseSerif = {
			fontFamily: `${theme('fontFamily.serif')}`,
		};
		const typeSansStyles = [
			...generateTypeStyle(12, 120, 0, `${prefixSans}1260`, baseSans),
			...generateTypeStyle(12, 120, 0, `${prefixSans}1240`, baseSans),
			...generateTypeStyle(14, 150, 0, `${prefixSans}1440`, baseSans),
			...generateTypeStyle(14, 140, 0, `${prefixSans}1460`, baseSans),
			...generateTypeStyle(16, 160, 0, `${prefixSans}1640`, baseSans),
			...generateTypeStyle(16, 160, 0, `${prefixSans}1660`, baseSans),
			...generateTypeStyle(18, 150, 0, `${prefixSans}1840`, baseSans),
			...generateTypeStyle(18, 160, 0, `${prefixSans}1860`, baseSans),
			...generateTypeStyle(20, 150, 0, `${prefixSans}2040`, baseSans),
			...generateTypeStyle(20, 140, 0, `${prefixSans}2060`, baseSans),
			...generateTypeStyle(22, 150, 0, `${prefixSans}2240`, baseSans),
			...generateTypeStyle(22, 150, 0, `${prefixSans}2260`, baseSans),
			...generateTypeStyle(32, 110, 0, `${prefixSans}3260`, baseSans),
		];
		const typeSerifStyles = [
			...generateTypeStyle(16, 150, 0, `${prefixSerif}1640`, baseSerif),
			...generateTypeStyle(18, 150, 0, `${prefixSerif}1840`, baseSerif),
			...generateTypeStyle(18, 150, 0, `${prefixSerif}1870`, baseSerif),
			...generateTypeStyle(20, 140, 0, `${prefixSerif}2040`, baseSerif),
			...generateTypeStyle(20, 140, 0, `${prefixSerif}2060`, baseSerif),
			...generateTypeStyle(22, 140, 0, `${prefixSerif}2240`, baseSerif),
			...generateTypeStyle(22, 140, 0, `${prefixSerif}2260`, baseSerif),
			...generateTypeStyle(26, 120, 0, `${prefixSerif}2640`, baseSerif),
			...generateTypeStyle(26, 120, 0, `${prefixSerif}2670`, baseSerif),
			...generateTypeStyle(28, 100, 0, `${prefixSerif}2860`, baseSerif),
			...generateTypeStyle(32, 110, 0, `${prefixSerif}3260`, baseSerif),
			...generateTypeStyle(42, 120, 0, `${prefixSerif}4260`, baseSerif),
			...generateTypeStyle(44, 120, 0, `${prefixSerif}4460`, baseSerif),
			...generateTypeStyle(44, 120, 0, `${prefixSerif}4470`, baseSerif),
			...generateTypeStyle(56, 110, 0, `${prefixSerif}5660`, baseSerif),
			...generateTypeStyle(72, 110, 0, `${prefixSerif}7260`, baseSerif),
			...generateTypeStyle(90, 110, 0, `${prefixSerif}9060`, baseSerif),
		];
		addUtilities([typeSansStyles, typeSerifStyles], ['responsive']);
	};
};
